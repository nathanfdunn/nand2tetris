// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Sys.jack

/**
 * A library that supports various program execution services.
 */
class Sys {
    static int errorMessageString;
    static int loopsPerMillisecond;
    // Pre-allocate this in case we run out of memory later

    /** Performs all the initializations required by the OS. */
    function void init() {
        var String mystr;
        let loopsPerMillisecond = 300;

        do Memory.init();
        do Math.init();
        do Keyboard.init();
        do Output.init();
        
        // let errorMessageString = String.new(6);
        // do errorMessageString.appendChar(69);
        // do errorMessageString.appendChar(82);
        // do errorMessageString.appendChar(82);
        let mystr = "ERR";
        let errorMessageString = mystr;
        do Output.printString(errorMessageString);
        // do Sys.error(42);
        do Sys.idk(errorMessageString);
        do Sys.halt();
        return;

        do Main.main();

        do Sys.halt();

        return;
    }

    /** Halts the program execution. */
    function void halt() {
        while (true) {

        }
        return;
    }

    /** Waits approximately duration milliseconds and returns.  */
    function void wait(int duration) {
        var int numLoops;

        while (duration > 0) {
            let numLoops = loopsPerMillisecond;
            while (numLoops > 0) {
                let numLoops = numLoops - 1;
            }
            let duration = duration - 1;
        }

        return;
    }

    function void breakpoint() {
        var Array keyboard;
        let keyboard = 24576;
        while (keyboard[0] = 0) {
        }
        return;
    }

    function void idk(String arg) {
        do Output.printString(arg);
        do Output.printString(errorMessageString);
        return;
    }

    /** Displays the given error code in the form "ERR<errorCode>",
     *  and halts the program's execution. */
    function void error(int errorCode) {
        // do Output.printString("Waiting");
        // // do Sys.wait(1000);
        // do Keyboard.readChar();
        // do Output.printString("oops");
        // do Output.printString("breaking");
        // do Sys.breakpoint();
        do Output.printString(errorMessageString);
        do Sys.halt();
        return;
    }
}
