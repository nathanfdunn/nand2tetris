// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array characters;
    field int curLen;
    field int maxLen;

    static boolean isInitialized;
    static Array powersOfTen;

    function int numPowers() {
        return 5;
    }

    function void init() {
        let isInitialized = true;
        let powersOfTen = Array.new(String.numPowers());
        let powersOfTen[0] = 10000;
        let powersOfTen[1] = 1000;
        let powersOfTen[2] = 100;
        let powersOfTen[3] = 10;
        let powersOfTen[4] = 1;
        return;
    }

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (~isInitialized) {
            do String.init();
        }

        if (maxLength > 0) {
            let characters = Array.new(maxLength);
        }
        let maxLen = maxLength;
        let curLen = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen > 0) {
            do Memory.deAlloc(characters);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return curLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return characters[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let characters[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let characters[curLen] = c;
        let curLen = curLen + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let curLen = curLen - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        if (curLen = 0) {
            return 0;
        }

        if (characters[0] = String.hypthenChar()) {
            return -intValuePositive(1);
        }
        else {
            return intValuePositive(0);
        }
    }

    method int intValuePositive(int ind) {
        var int ret;
        let ret = 0;
        while (ind < curLen) {
            if (~String.isDigit(characters[ind])) {
                return ret;
            }

            let ret = Math.multiply(10, ret) + (characters[ind] - String.zeroChar());
            let ind = ind + 1;
        }

        return ret;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int curIndex;
        var int exponentIndex;
        var int quotient;
        var boolean startedPrinting;
        let curIndex = 0;
        let exponentIndex = 0;

        if (val = 0) {
            let characters[0] = String.zeroChar();
            let curLen = 1;
            return;
        }

        if (val < 0) {
            let characters[0] = String.hypthenChar();
            let curIndex = 1;
            let val = -val;
        }

        while (exponentIndex < String.numPowers()) {
            let quotient = Math.divide(val, powersOfTen[exponentIndex]);
            let val = val - Math.multiply(quotient, powersOfTen[exponentIndex]);
            if (quotient > 0) {
                let startedPrinting = true;
            }

            if (startedPrinting) {
                let characters[curIndex] = String.zeroChar() + quotient;
                let curIndex = curIndex + 1;
            }

            let exponentIndex = exponentIndex + 1;
        }

        let curLen = curIndex;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;         // ??
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;         // ??
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;      // ord('"')
    }

    function char zeroChar() {
        return 48;      // ord('0')
    }

    function char hypthenChar() {
        return 45;      // ord('-')
    }

    function boolean isDigit(char c) {
        if (c < String.zeroChar()) {
            return false;
        }
        if (c > (String.zeroChar() + 9)) {
            return false;
        }
        return true;
    }
}
