// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    static Array keyboardAddress;
    static char newlineChar;
    static char backspaceChar;
    static char lastChar;

    /** Initializes the keyboard. */
    function void init() {
        let keyboardAddress = 24576;
        let newlineChar = String.newLine();
        let backspaceChar = String.backSpace();
        let lastChar = 0;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return keyboardAddress[0];
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        return Keyboard.readCharOptionalBackspace(true);
    }

    function char readCharOptionalBackspace(boolean allowBackspace) {
        var char ret;

        let ret = Keyboard.keyPressed();
        do Output.printChar(0);
        while ((ret = 0) | (ret = lastChar) | ((ret = backspaceChar) & ~allowBackspace)) {
            let lastChar = ret;
            let ret = Keyboard.keyPressed();
        }

        let lastChar = ret;
        do Output.backSpace();
        do Output.printChar(ret);
        return ret;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String ret;
        var char typed;
        // var char lastChar;

        do Output.printString(message);
        // That's 8 lines of text...should be enough
        let ret = String.new(255);
        
        // let lastChar = 0;
        let typed = Keyboard.readCharOptionalBackspace(false);
        while (~(typed = newlineChar)) {
            if (typed = backspaceChar) {
                do ret.eraseLastChar();
            }
            else {
                do ret.appendChar(typed);
            }
            let typed = Keyboard.readCharOptionalBackspace(ret.length() > 0);
        }
        // do Output.println();
        return ret;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String input;
        let input = Keyboard.readLine(message);
        return input.intValue();
    }
}
