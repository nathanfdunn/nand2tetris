


class Main {
    static Board board;

    function void main() {
        do Main.init();

        while (true) {
            do Main.update();
            do Main.draw();
        }

        return;
    }

    function void init() {
        do Board.init();

        let board = Board.new();
        do Piece.init();

        // TODO
        // do SquareGenerator.init();

        do List.init();

        return;
    }

    function void update() {
        var String command;
        let command = Keyboard.readLine(">");

        do Main.processCommand(command);
        return;
    }

    function void draw() {
        // let condition = board.getHasChanges(); //asfd.asdf;
        if (board.getHasChanges()){
            do Screen.setColor(true);

            do Main.drawBoard();
        }

        do board.acknowledgeChanges();

        return;
    }

    function void drawBoard() {
        do board.print();

        return;
    }

    function void processCommand(String command) {
        var Move move;
        if (Util.strCmp(command, "")){
            return;
        }

        if (Util.startsWith(command, "UCI")) {
            // do Output.printString("TODO make a UCI move.");
            // do Output.println();
            let move = Commands.parseUciCommand(command);
            // do Output.printString(move.toString());
            do board.makeMove(move);

            return;
        }

        if (Util.strCmp(command, "REFRESH")) {
            do board.touch();
            do Main.draw();
            return;
        }

        if (Util.strCmp(command, "QUIT")){
            do Output.printString("Good bye. TODO stop processing.");
            do Output.println();
            return;
        }
        
        if (Util.strCmp(command, "RESTART")){
            let board = Board.new();
            do Output.printString("Restarting Game");
            do Output.println();
            return;
        }

        do Output.printString("Invalid command");
        do Output.println();            

        return;
    }
}
