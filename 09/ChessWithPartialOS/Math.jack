// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        // let twoToThe[0] = 1;
        // let twoToThe[1] = 2;
        // let twoToThe[2] = 4;
        // let twoToThe[3] = 8;

        // let twoToThe[4] = 16;
        // let twoToThe[5] = 32;
        // let twoToThe[6] = 64;
        // let twoToThe[7] = 128;

        // let twoToThe[8] = 256;
        // let twoToThe[9] = 512;
        // let twoToThe[10] = 1024;
        // let twoToThe[11] = 2048;

        // let twoToThe[12] = 4096;
        // let twoToThe[13] = 8192;
        // let twoToThe[14] = 16384;
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        
        let twoToThe[15] = twoToThe[14] + twoToThe[14];
        return;
    }

    function boolean bit(int x, int j) {
        return x & twoToThe[j] > 0;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int j;
        var boolean negate;


        if (
            ((x < 0) & (y < 0)) |
            ((x > 0) & (y > 0))
        ) {
            let negate = false;
        } 
        else {
            let negate = true;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);

        let sum = 0;
        let shiftedX = x;
        let j = 0;
        while (j < 16) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }

        if (negate) {
            return -sum;
        }
        else {
            return sum;
        }
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean negate;

        if (y = 0) {
            do Sys.error(9);
            // Don't think we'll actually get to the return...
            return 0;
        }

        if (
            ((x < 0) & (y < 0)) |
            ((x > 0) & (y > 0))
        ) {
            let negate = false;
        } 
        else {
            let negate = true;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (negate) {
            return -Math.divideInner(x, y);
        }
        else {
            return Math.divideInner(x, y);
        }
    }

    // Internal use
    // x and y are guaranteed to be positive
    function int divideInner(int x, int y) {
        var int q;
        var int qy;

        if (y > x) {
            return 0;
        }

        let q = Math.divideInner(x, y + y);
        // TODO 
        let qy = Math.multiply(q, y);
        if ((x - (qy + qy)) < y) {
            return q + q;
        }
        else {
            return q + q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j;
        var int y;
        var int maybeY;
        
        let j = 7;      // n/2 - 1
        let y = 0;
        
        while (j > (-1)) {
            let maybeY = y + twoToThe[j];
            if (Math.multiply(maybeY, maybeY) < (x + 1)){
                let y = maybeY;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }

        return b;
    }
}
